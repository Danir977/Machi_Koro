import { useState, useEffect } from 'react';
import io, { Socket } from 'socket.io-client';
import { appStyle } from './styles/globals';
import {
    screenStyle,
    titleStyle,
    statusStyle,
    buttonContainerStyle,
    buttonStyle,
    buttonDisabledStyle,
    buttonBackStyle,
    inputStyle,
    gameStatusStyle
} from './styles/components/App.styles';

type Screen = 'main-menu' | 'create-game' | 'join-game' | 'game';

function App() {
    const [socket, setSocket] = useState<Socket | null>(null);
    const [isConnected, setIsConnected] = useState(false);
    const [currentScreen, setCurrentScreen] = useState<Screen>('main-menu');
    const [roomCode, setRoomCode] = useState('');
    const [gameStatus, setGameStatus] = useState('');

    useEffect(() => {
        const newSocket = io('http://localhost:3000', {
            autoConnect: true,
            reconnection: true,
            reconnectionAttempts: 5,
            reconnectionDelay: 1000,
        });
        setSocket(newSocket);

        newSocket.on('connect', () => {
            setIsConnected(true);
            console.log('Connected to server');
        });

        newSocket.on("connect_error", (error) => {
            console.log("Connection error:", error);
            setIsConnected(false);
        });

        newSocket.on('disconnect', () => {
            setIsConnected(false);
        });

        newSocket.on('roomCreated', (code: string) => {
            setGameStatus(`–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${code}`);
            setCurrentScreen('game');
        });

        newSocket.on('roomJoined', (code: string) => {
            setGameStatus(`–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${code}`);
            setCurrentScreen('game');
        });

        newSocket.on('error', (message: string) => {
            setGameStatus(`–û—à–∏–±–∫–∞: ${message}`);
        });

        return () => {
            newSocket.close();
        };
    }, []);

    const createGame = () => {
        socket?.emit('createRoom');
        setCurrentScreen('create-game');
    };

    const joinGame = () => {
        if (roomCode.trim()) {
            socket?.emit('joinRoom', roomCode.trim());
        }
    };

    const renderScreen = () => {
        switch (currentScreen) {
            case 'main-menu':
                return (
                    <div style={screenStyle}>
                        <h1 style={titleStyle}>üéÆ Machi Koro Online</h1>
                        <p style={statusStyle}>
                            Status: {isConnected ? 'Connected' : 'Disconnected'}
                        </p>

                        <div style={buttonContainerStyle}>
                            <button
                                onClick={createGame}
                                style={buttonStyle}
                            >
                                –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                            </button>
                            <button
                                onClick={() => setCurrentScreen('join-game')}
                                style={buttonStyle}
                            >
                                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
                            </button>
                        </div>
                    </div>
                );

            case 'create-game':
                return (
                    <div style={screenStyle}>
                        <h2 style={titleStyle}>–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...</h2>
                        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                        <button
                            onClick={() => setCurrentScreen('main-menu')}
                            style={buttonBackStyle}
                        >
                            –ù–∞–∑–∞–¥
                        </button>
                    </div>
                );

            case 'join-game':
                return (
                    <div style={screenStyle}>
                        <h2 style={titleStyle}>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</h2>
                        <input
                            type="text"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"
                            value={roomCode}
                            onChange={(e) => setRoomCode(e.target.value)}
                            style={inputStyle}
                        />
                        <button
                            onClick={joinGame}
                            style={!roomCode.trim() ? buttonDisabledStyle : buttonStyle}
                            disabled={!roomCode.trim()}
                        >
                            –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        </button>
                        <button
                            onClick={() => setCurrentScreen('main-menu')}
                            style={buttonBackStyle}
                        >
                            –ù–∞–∑–∞–¥
                        </button>
                    </div>
                );

            case 'game':
                return (
                    <div style={screenStyle}>
                        <h2 style={titleStyle}>–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞</h2>
                        <p style={gameStatusStyle}>{gameStatus}</p>
                        <p>–û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</p>
                        <button
                            onClick={() => {
                                setCurrentScreen('main-menu');
                                setGameStatus('');
                            }}
                            style={buttonBackStyle}
                        >
                            –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é
                        </button>
                    </div>
                );

            default:
                return (
                    <div style={screenStyle}>
                        <p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω</p>
                        <button
                            onClick={() => setCurrentScreen('main-menu')}
                            style={buttonBackStyle}
                        >
                            –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        </button>
                    </div>
                );
        }
    };

    return (
        <div style={appStyle}>
            {renderScreen()}
        </div>
    );
}

export default App;